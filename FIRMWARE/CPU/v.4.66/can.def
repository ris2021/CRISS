.EQU	CAN_CMD_READ	= 0b00000011
.EQU	CAN_CMD_RESET	= 0b11000000
.EQU	CAN_CMD_READRX0	= 0b10010000	; read from the beginning
.EQU	CAN_CMD_READRX1	= 0b10010100
.EQU	CAN_CMD_WRITE	= 0b00000010
.EQU	CAN_CMD_LOADTX0	= 0b01000000	; load from beginning
.EQU	CAN_CMD_LOADTX1	= 0b01000010
.EQU	CAN_CMD_LOADTX2	= 0b01000100
.EQU	CAN_CMD_RTS	= 0b10000000
.EQU	CAN_CMD_RTS0	= 0b10000001
.EQU	CAN_CMD_RTS1	= 0b10000010
.EQU	CAN_CMD_RTS2	= 0b10000100
.EQU	CAN_CMD_STATUS	= 0b10100000
.EQU	CAN_CMD_RXSTAT	= 0b10110000
.EQU	CAN_CMD_BITMOD	= 0b00000101

.EQU	CAN_REG_CANCTRL	= 0x0f
.EQU	CAN_REG_CANSTAT	= 0x0e

.EQU	CAN_REG_CNF1	= 0x2a
.EQU	CAN_REG_CNF2	= 0x29
.EQU	CAN_REG_CNF3	= 0x28

.EQU	CAN_REG_RXF0SIDH= 0x00
.EQU	CAN_REG_RXF0SIDL= 0x01
.EQU	CAN_REG_RXF0EID8= 0x02
.EQU	CAN_REG_RXF0EID0= 0x03

.EQU	CAN_REG_RXM0SIDH= 0x20
.EQU	CAN_REG_RXM0SIDL= 0x21
.EQU	CAN_REG_RXM0EID8= 0x22
.EQU	CAN_REG_RXM0EID0= 0x23

.EQU	CAN_REG_RXB0CTRL= 0x60
.EQU	CAN_REG_RXBnSIDH= 0x61
.EQU	CAN_REG_RXBnSIDL= 0x62
.EQU	CAN_REG_RXBnEID8= 0x63
.EQU	CAN_REG_RXBnEID0= 0x64
.EQU	CAN_REG_RXB0DLC = 0x65

.EQU	CAN_REG_TXRTSCTRL=0x0d

.EQU	CAN_REG_TXB0CTRL= 0x30		; TX buffer 0
.EQU	CAN_REG_TXB0SIDH= 0x31
.EQU	CAN_REG_TXB0SIDL= 0x32
.EQU	CAN_REG_TXB0EID8= 0x33
.EQU	CAN_REG_TXB0EID0= 0x34
.EQU	CAN_REG_TXB0DLC = 0x35
.EQU	CAN_REG_TXB0D0  = 0x36
.EQU	CAN_REG_TXB0D1  = 0x37
.EQU	CAN_REG_TXB0D2  = 0x38
.EQU	CAN_REG_TXB0D3  = 0x39
.EQU	CAN_REG_TXB0D4  = 0x3a
.EQU	CAN_REG_TXB0D5  = 0x3b
.EQU	CAN_REG_TXB0D6  = 0x3c
.EQU	CAN_REG_TXB0D7  = 0x3d

; commands definition
.EQU	CMDCAN_INIT	= 0
.EQU	CMDCAN_INIT_BUF	= 1
.EQU	CMDCAN_SEND	= 6
.EQU	CMDCAN_RECEIVE	= 7
.EQU	CMDCAN_RX_STATUS= 8
.EQU	CMDCAN_STATUS	= 17
.EQU	CMDCAN_SET_TXLEN= 21
.EQU	CMDCAN_ABORT_TX	= 22
.EQU	CMDCAN_TX_STATUS= 23
.EQU	CMDCAN_RESET	= 24


; read register @0
.MACRO	CAN_READ_REG
        SPI_SELECT
	iSPI	CAN_CMD_READ
	iSPI	@0
	iSPI	0xff		; read data
        SPI_DESELECT
.ENDM

; write register @0 data @1
.MACRO	CAN_WRITE_REG
        SPI_SELECT
	iSPI	CAN_CMD_WRITE
	iSPI	@0
	iSPI	@1		; read data
        SPI_DESELECT
.ENDM

; read register @0
.MACRO	CAN_RESET
        SPI_SELECT
	iSPI	CAN_CMD_RESET
        SPI_DESELECT
.ENDM

; write zzC to register @0, uses temp
.MACRO	CAN_CALL_WRITE
	ldi	temp, @0
	rcall	CAN_EXEC_WRITE
.ENDM

.MACRO	EXEC_CAN_CMD
	ldi	temp, @0
	call	CAN_CMD
.ENDM

.MACRO	_EXEC_CAN_CMD
	ldi	temp, @0
	rcall	_CAN_CMD
.ENDM
